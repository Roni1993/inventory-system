scalar Date

type Query {
    delivery(id: ID!): Delivery
    deliveries(page: Page): DeliveryCollection!
    deliveriesPlannedTomorrow(page: Page): DeliveryCollection!
    deliveredBetween(from: Date!, to: Date!, page: Page): DeliveryCollection!
}

input Sort {
    field: String
    order: OrderType
}

enum OrderType { ASC, DESC }

# Tests
# TODO: build repository tests
# TODO: build graphql tests


input Page {
    page: Int,
    size: Int,
    sort: [Sort]
}

type DeliveryCollection  {
    content: [Delivery]
    page: Int
    offset: Int
    size: Int
    totalElements: Int
    totalPages: Int
}

type Delivery {
    id: ID!
    status: DeliveryStatus!
    category: DeliveryCategory!
    plannedDeliveryDate: Date!
    actualDeliveryDate: Date
    items: [Item]
}

type Item {
    name: String!
    quantity: Int!
}

enum DeliveryCategory {
    TRUCK,
    PARCEL,
}

enum DeliveryStatus {
    PLANNED,
    IN_PROGRESS,
    DELIVERED,
    UNKNOWN
}

